# This workflow will build and push a new container image to Amazon ECR,
name: 'GitHub Actions to build and push docker image to ECR'
on:
  push:
    branches:
      - master

             
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: 'Get Previous tag'
      id: previoustag
      uses: "WyriHaximus/github-action-get-previous-tag@master"
    - name: 'Get next minor version'
      id: semvers
      uses: "WyriHaximus/github-action-next-semvers@master"
      with:
          version: ${{ steps.previoustag.outputs.tag }}
    - name: 'Create new milestone'
      id: createmilestone
      uses: "WyriHaximus/github-action-create-milestone@master"
      with:
          title: ${{ steps.semvers.outputs.patch }}

#     - name: Build, tag, and push image to Amazon ECR
#       id: get_version
#       run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        set -x 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nodejs
        IMAGE_TAG:   ${{ steps.createmilestone.outputs.tag }} 

   
#    - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: task-definition.json
#        container-name: sample-app
#       image: ${{ steps.build-image.outputs.image }}

 #   - name: Deploy Amazon ECS task definition
 #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
 #     with:
 #       task-definition: ${{ steps.task-def.outputs.task-definition }}
 #       service: sample-app-service
 #       cluster: default
 #       wait-for-service-stability: true

